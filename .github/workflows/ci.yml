name: CI

on:
  push:
    branches: [ main, develop, "001-*" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run contract tests
      run: uv run pytest tests/contract/ -v --tb=short
    
    - name: Run unit tests
      run: uv run pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests
      run: uv run pytest tests/integration/ -v --tb=short
    
    - name: Run performance tests (quick)
      run: uv run pytest tests/performance/ -v --tb=short -m "not slow"

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Install dependencies with coverage
      run: |
        uv sync
        uv add --dev coverage[toml] pytest-cov
    
    - name: Run tests with coverage
      run: |
        uv run pytest \
          --cov=src/point_shoting \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          tests/contract/ tests/unit/ tests/integration/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run performance benchmark
      run: |
        uv run python scripts/profile_engine.py --particles 5000 --steps 50 > benchmark_results.txt
        cat benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.txt

  build-and-test-distribution:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Build distribution
      run: uv build
    
    - name: Test installation from wheel
      run: |
        # Install from built wheel in a clean environment
        uv pip install --isolated dist/*.whl
        # Test basic import
        python -c "from point_shoting.models.settings import Settings; print('Import successful')"
    
    - name: Upload distribution artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
