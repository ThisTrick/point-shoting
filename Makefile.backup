.PHONY: install format lint typecheck typecheck-fix check-all test test-unit test-contract test-integration test-performance test-coverage clean run-example profile build sync help ui-build ui-test ui-test-parallel ui-test-integration ui-test-e2e ui-lint ui-typecheck test-pipeline-quick test-pipeline-ci test-sequential

# Installation targets
install:
	uv sync

dev-install:
	uv sync --all-extras

# Code quality targets
lint:
	uv run ruff check .
	uv run ruff format --check .

format:
	uv run ruff format .

# Type checking
typecheck:
	uv run mypy src/point_shoting --show-error-codes --ignore-missing-imports

typecheck-strict:
	uv run mypy src/point_shoting --strict --show-error-codes

# All quality checks (lint only for pipeline speed)
check-all: lint
	@echo "All code quality checks passed!"

# Testing targets
test:
	uv run pytest --tb=short -n auto

test-contract:
	uv run pytest -m contract --tb=short -n auto

test-integration:
	uv run pytest -m integration --tb=short -n auto

test-unit:
	uv run pytest -m unit --tb=short -n auto

test-performance:
	uv run pytest -m performance --tb=short -n auto

# Coverage
test-coverage:
	uv run pytest --cov=src/point_shoting --cov-report=html --cov-report=term --tb=short -n auto

# Cleanup
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf .ruff_cache/

# Development
run-example:
	uv run python examples/minimal_run.py

profile:
	uv run python scripts/profile_engine.py

# Build
build:
	uv build

# Build all components (Python + UI)
build-all: build ui-build
	@echo "✅ All components built successfully"

# UI targets
ui-build:
	cd ui && npm run build:dev

ui-test:
	cd ui && npm run test -- --maxWorkers=50%

ui-test-parallel:
	cd ui && npm run test -- --testPathPattern="(unit|contract)" --maxWorkers=50%

ui-test-integration:
	cd ui && npm run test -- --testPathPattern=integration --maxWorkers=50%

ui-test-contract:
	cd ui && npm run test -- --testPathPattern=contract --maxWorkers=50%

ui-test-e2e:
	cd ui && npm run test:e2e

ui-lint:
	cd ui && npm run lint

ui-typecheck:
	cd ui && npm run typecheck

# Quick pipeline (skip E2E for faster feedback during development)
test-pipeline-quick: check-all test-unit test-integration
	@echo "✅ Quick pipeline completed! (E2E tests skipped)"

# CI pipeline (for automated testing) - includes coverage and all tests
test-pipeline-ci: install check-all test-coverage ui-test-parallel ui-build ui-test-e2e
	@echo "✅ CI pipeline completed successfully!"

# Sequential testing pipeline (build first, then tests from simple to complex)
# Useful for development to catch issues early and understand test level failures
test-sequential: build-all test-unit ui-test-parallel test-contract test-integration test-performance ui-test-e2e
	@echo "✅ Sequential testing pipeline completed!"
	@echo "   Build → Unit → UI Unit+Contract (parallel) → Contract → Integration → Performance → E2E"
	@echo "   Note: UI Integration tests require Electron environment (currently skipped)"

# Sync dependencies
sync:
	./scripts/uv_sync.sh
	uv sync --all-extras

# Code quality targets
lint:
	uv run ruff check .
	uv run ruff format --check .

format:
	uv run ruff format .

# Type checking
typecheck:
	uv run mypy src/point_shoting --show-error-codes --ignore-missing-imports

typecheck-strict:
	uv run mypy src/point_shoting --strict --show-error-codes

# All quality checks (lint only for pipeline speed)
check-all: lint
	@echo "All code quality checks passed!"

# Testing targets
test:
	uv run pytest --tb=short -n auto

test-watch:
	uv run pytest --tb=short -q -x --disable-warnings -f

test-contract:
	uv run pytest -m contract --tb=short -n auto

test-integration:
	uv run pytest -m integration --tb=short -n auto

test-unit:
	uv run pytest -m unit --tb=short -n auto

test-performance:
	uv run pytest -m performance --tb=short -n auto

# Coverage
test-coverage:
	uv run pytest --cov=src/point_shoting --cov-report=html --cov-report=term --tb=short -n auto

# Cleanup
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf .ruff_cache/

# Development
run-example:
	uv run python examples/minimal_run.py

profile:
	uv run python scripts/profile_engine.py

# Build
build:
	uv build

# Build all components (Python + UI)
build-all: build ui-build
	@echo "✅ All components built successfully"

# UI targets
